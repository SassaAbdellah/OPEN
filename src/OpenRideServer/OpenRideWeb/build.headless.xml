<?xml version="1.0" encoding="UTF-8"?>
<project name="OpenRideWeb" default="all" basedir=".">
    <description>Builds the project OpenRideServerWeb.</description>



    <!-- TODO: Strangely, minify originally concatenated right into the build.dir  -->
    <property name="build.dir" value="build" />

    <!-- dist.dir is the directory where the war gets created -->
    <property name="dist.dir" value="dist" />

    <!-- classes.dir is the directory where the classes are compiled to -->
    <property name="classes.dir" value="${build.dir}/classes" />

     <!-- *** external libs and jee libs are                                   *** -->
     <!-- *** imported from the OpenRideServer-ejb project                      *** -->
    <property name="lib.dir"                 value="../OpenRideServer-ejb/libs/"                       />
    <!-- ***  EJB contains classes imported in OpenRideServerRS                *** -->
    <!-- ***  TODO: check if this exists before importing, give errormessage   *** -->
    <property name="OpenRideServer-ejb.jar"  value="../OpenRideServer-ejb/dist/OpenRideServer-ejb.jar" />




    <!-- ************************************************************************ -->
    <!-- *** Load local properties file from OpenRideServer project           *** -->
    <!-- ************************************************************************ -->
    <target name="loadLocalProperties">

         <fail message=" ../local.properties file is missing! -- You will probably have to create one, see included local.properties.sample file. ">
            <condition>
                <not>
                        <resourcecount count="1">
                                <fileset id="fs" dir=".." includes="local.properties"/>
                        </resourcecount>
                </not>
           </condition>
        </fail>

     <!-- *** So, as localconf is in place, we can happily load the local.properties  *** -->
         <loadproperties>
                <file file="../local.properties"/>
        </loadproperties>

    </target> <!-- end of target named="loadLocalProperties" -->


    <!-- ****************************************************************************** -->
    <!-- *** Do the branding, i.e add your own imprint, terms of use, partnerlinks...   -->
    <!-- ****************************************************************************** -->

    <target name="branding" depends="loadLocalProperties" description="add your own imprint, terms of use, partnerlinks..." >




     <!-- *** process imprint.jsp *** -->
  
     <!-- exchange imprint        -->
     <property name="imprint.jsp" value="../${imprint.jsp.base}" />   
     <copy file="${imprint.jsp}" tofile="${build.dir}/imprint.jsp" overwrite="true" verbose="true" />

     <!-- adapt HEADER_MARK in imprint.jsp to include OpenRideWeb Header   --> 
     <replace  file="${build.dir}/imprint.jsp"   
      	token="HEADER_MARK" 
      	value="&lt;jsp:include page=&quot;/WEB-INF/jspf/header.jsp&quot; /&gt;" 
     />

      <!-- adapt FOOTER_MARK in imprint.jsp to include OpenRideWeb Footer   -->
     <replace  file="${build.dir}/imprint.jsp"
        token="FOOTER_MARK"
        value=" &lt;jsp:include page=&quot;/WEB-INF/jspf/footer.jsp&quot;&gt;&lt;jsp:param name=&quot;section&quot; value=&quot;imprint&quot; /&gt;&lt;/jsp:include&gt;"
     />


     
     <!-- *** process terms.jsp *** -->
  
     <!-- exchange terms of use   -->
     <property name="terms.jsp" value="../${terms.jsp.base}" />   
     <copy file="${terms.jsp}" tofile="${build.dir}/terms.jsp" overwrite="true" verbose="true" />


     <!-- adapt HEADER_MARK in terms.jsp to include OpenRideWeb Header   --> 
     <replace  file="${build.dir}/terms.jsp"   
      	token="HEADER_MARK" 
      	value="&lt;jsp:include page=&quot;/WEB-INF/jspf/header.jsp&quot; /&gt;" 
     />

     <replace  file="${build.dir}/terms.jsp"
        token="FOOTER_MARK"
        value=" &lt;jsp:include page=&quot;/WEB-INF/jspf/footer.jsp&quot;&gt;&lt;jsp:param name=&quot;section&quot; value=&quot;terms&quot; /&gt;&lt;/jsp:include&gt;"
     />

    
    <!-- *** process contact.jsp *** -->

     <!-- exchange contact page   -->
     <property name="contact.jsp" value="../${contact.jsp.base}" />
     <copy file="${contact.jsp}" tofile="${build.dir}/contact.jsp" overwrite="true" verbose="true" />


     <!-- adapt HEADER_MARK in contact.jsp to include OpenRideWeb Header   -->
     <replace  file="${build.dir}/contact.jsp"
        token="HEADER_MARK"
        value="&lt;jsp:include page=&quot;/WEB-INF/jspf/header.jsp&quot; /&gt;"
     />

     <replace  file="${build.dir}/contact.jsp"
        token="FOOTER_MARK"
        value=" &lt;jsp:include page=&quot;/WEB-INF/jspf/footer.jsp&quot;&gt;&lt;/jsp:include&gt;"
     />
  





    </target> <!--end of target "branding" -->




   
    <!-- ************************************************************************* -->
    <!-- *** replace old fhg google maps api key with new google maps api key  *** -->
    <!-- ************************************************************************* -->
 
    <target name="replaceMapsKey" depends="loadLocalProperties" description="replace old fhg google maps api key with new google maps api key" >


        <!-- ** The old google maps api key, as used by openride before February 2012 ** -->
        <!-- ** This is used as a replace pattern                                     ** -->

        <property name="google.maps.api.key.old"  value="ABQIAAAAdbsOt58RO04BJLOwuybQyhTCT0k0d1rf0afV5cFJy3ix6t_ZGRQzwAPC1ri6AFQ7AO5hVtlRs8llOQ" />

       <echo>
           replacing  default GoogleMapsApi Key     : ${google.maps.api.key.old}
           with       individual GoogleMapsApi Key  : ${google.maps.api.key}
       </echo>


     <!-- *** As the OpenrideWeb worked well with the old key, we skip the replace target             *** --> 
     <!-- *** until we have a better reason to do so.                                                 ***-->
     <!-- *** This seems to be used only when fixing favourites, and uses deprecated JavaScriptAPI v2 *** -->
     <!-- replace file="${build.dir}/profile.jsp"   token="${google.maps.api.key.old}" value="${google.maps.api.key}" / -->

    </target>  <!-- end of target "replaceMapsKey" -->



 
   <!-- ********************************************************************************* -->
   <!-- *** target "build": compile classes, rewrite jsps to use our Google Maps Key  *** -->
   <!-- ********************************************************************************* -->

   <target name="build" depends="loadLocalProperties">


   <!-- load jee libs as configure in master project -->
   <property name="jee.lib.dir" value="../${jee.lib.basedir}" />

   <!-- *** ensure that build.dir is there   *** -->
   <mkdir dir="${build.dir}" />


   <!-- ******************************************* -->
   <!-- *** compile java classes to classes.dir *** -->
   <!-- ******************************************* -->
   <mkdir dir="${classes.dir}" />

   <javac srcdir="src/java" destdir="${classes.dir}" > 
      <classpath>
 	<fileset dir="${lib.dir}">
		<include name="**/*.jar" />
	</fileset>

	<fileset dir="${jee.lib.dir}">
            <include name="**/*.jar" />
	</fileset>

	<fileset file="${OpenRideServer-ejb.jar}" />

      </classpath>  
     </javac>

     <!-- copy propertiy files to build.dir -->	
     <copy  todir="${classes.dir}/de/fhg/fokus/openride/webclient/" >
      <fileset dir="src/java/de/fhg/fokus/openride/webclient/" >
        <include name="**/*.properties" />
      </fileset>
     </copy> 






     <!-- ******************************************************************* -->
     <!-- *** Apply the branding to what is in the build.dir              *** -->    
     <!-- ******************************************************************* -->

     <antcall target="branding" />


     <!-- ******************************************************************* -->
     <!-- *** copy web classes to build dir and rewrite GoogleMapsApi Key *** -->
     <!-- ******************************************************************* -->

      <!-- copy web files to build.dir -->
     <copy  todir="${build.dir}" >
      <fileset dir="web" >
      </fileset>
     </copy>

     <antcall target="replaceMapsKey" />


   </target>  <!-- end of  target "build" -->


 
    <!-- ******************************************* -->
    <!-- *** target "dist": create the war file  *** -->	
    <!-- ******************************************* -->
    
  <target name="dist" depends="build" >


    <!-- create destination directory -->  
    <mkdir dir="${dist.dir}" />




      <war destfile="${dist.dir}/${ant.project.name}.war" needxmlfile="false" >

        <!-- Include classes ***************************** -->
        <classes dir="${classes.dir}" />

        <!-- include some libs from ejb project.                    ******* -->
        <!-- TODO: some of these libs may not be necessary, check!  ******* -->
      
       <lib dir="${lib.dir}"> 

          <include name="commons-el.jar"/> 
          <include name="commons-fileupload-1.2.1.jar"/>
          <include name="commons-io-1.4.jar"/>
 	  <include name="commons-lang-2.4.jar"/>
	  <include name="commons-logging-1.1.1.jar"/>
	  <include name="commons-validator-1.3.1.jar"/>
	  <include name="jakarta-oro-2.0.8.jar"/>
	  <include name="OpenRideExternalLibsAndLicenses.docx"/>
	  <include name="OpenRideExternalLibsAndLicenses.pdf"/>
           
          <!-- TODO: maybe one of these tomahawks should go away. But which one? -->
           
 	  <include name="tomahawk12-1.1.9.jar"/>
	  <include name="tomahawk-1.1.9.jar"/>
 
       </lib> 

        <zipfileset dir="${build.dir}" />

      </war>

    </target> <!-- end of target "dist" -->

    
    <!-- ********************************************************* -->
    <!-- *** target "clean": clean dist and build directories  *** -->	
    <!-- ********************************************************* -->
   <target name="clean">
	<delete dir="${dist.dir}"  />
	<delete dir="${build.dir}" />
   </target> <!-- end of target "clean" -->

   


   <!-- ******************************************* -->
   <!-- *** target "all" :  do clean, then dist *** -->
   <!-- ******************************************* -->

   <target name="all"  depends="clean,dist"  />
    
</project>
