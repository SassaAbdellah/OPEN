<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui">


<h:head>
	<!-- enforce UTF 8. also, header is needed for primefaces to work  -->
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
</h:head>



<body>



	<ui:composition template="/templates/navbar1Layout.xhtml">


		<ui:define name="windowTitle">
                #{msgs.rideCreateNewRequest}
            </ui:define>

		<ui:define name="content">
     
            
                #{newride.initializeNewRide()}
                #{newride.smartUpdate()}


                <h1>#{msgs.rideCreateNewRequest}</h1>


			<!-- Display Request Limits -->
			<p>
				#{jprofile.updateFromDB()}
				<div class="formlabel">
					<h:outputFormat rendered="#{jprofile.canAddRequest}"
						value="#{msgs.limits_requestLimitMessage}">
						<f:param name="limits" value="#{jprofile.requestLimit}" />
					</h:outputFormat>
				</div>

				<div class="formlabel">
					<h:outputFormat rendered="#{jprofile.canAddRequest}"
						value="#{msgs.limits_requestsLeftMessage}">
						<f:param name="limits" value="#{jprofile.noLeftRequests}" />
					</h:outputFormat>
				</div>
			</p>

			<p>
				<!-- Show message that limit is exceeded if limit is exceeded -->
				<div class="formlabel">
					<h:outputFormat rendered="#{!jprofile.canAddRequest}"
						value="#{msgs.limits_requestLimitExceededMessage}">
						<f:param name="limits" value="#{jprofile.requestLimit}" />
					</h:outputFormat>
				</div>
			</p>
			<!-- Allow creation if limit is not exceeded -->

			<p>
				<p:panel>
					<!-- include wizard in a panel, so people get the idea that it's a panel...  -->
					<h:form rendered="#{jprofile.canAddRequest}">
						<!-- form for entering ride data -->

						<p>
							<div class="formLabel">#{msgs.rideStartptAddress}</div>
							<div class="formInput">
								<h:inputTextarea id="startPoint"
									value="#{newride.startptAddress}" required="true"
									requiredMessage="#{errormessages.StartpointAddressIsNullWhenCreatingRequest}" />
							</div>
							<div class="formError">
								<!-- display error if applies -->
								<h:message for="startPoint" />
							</div>

							<div class="formInput">
								<h:commandLink value="#{msgs.geolocationSelectPlace}"
									action="pickpoint" immediate="true">

									<!-- point parameters -->
									<f:param name="#{point.paramTargetURL}"
										value="#{HTTPUser.URLBase}/faces/protected/rider/rideCreate.xhtml" />
									<!-- set the target parameters, so we know which point to update -->
									<f:param name="#{point.paramTarget}"
										value="#{newride.paramValueTargetStartpoint}" />

									<!-- webflow parameters -->

									<f:param name="#{webflow.paramBack}" value="rider.rideCreate" />
									<f:param name="#{webflow.paramFinish}" value="rider.rideCreate" />
									<f:param name="#{webflow.paramCancel}" value="rider.rideCreate" />

								</h:commandLink>
							</div>

							<h:inputHidden id="longitudeStart"
								value="#{newride.longitudeStart}"
								validator="de.avci.joride.utils.validators.JorideLongitudeValidator" />


							<h:inputHidden id="latitudeStart"
								value="#{newride.latitudeStart}"
								validator="de.avci.joride.utils.validators.JorideLatitudeValidator" />

							<table>
								<!-- show numerical coordinates only if capability is turned on -->
								<ui:fragment rendered="#{jprofile.showCoordinatesCapability}">
									<tr>
										<td class="formLabel">#{msgs.geolocationLatitude}</td>
										<td>:</td>
										<td class="formInput">#{newride.latitudeStart}</td>
									</tr>
								</ui:fragment>
								<tr>
									<td colspan="3">
										<!-- field to display bound checking errors -->
										<div class="formError">
											<h:message for="latitudeStart" />
										</div>
									</td>
								</tr>
								<!-- show numerical coordinates only if capability is turned on -->
								<ui:fragment rendered="#{jprofile.showCoordinatesCapability}">
									<tr>
										<td class="formLabel">#{msgs.geolocationLongitude}</td>
										<td>:</td>
										<td class="formInput">#{newride.longitudeStart}</td>
									</tr>
								</ui:fragment>
								<tr>
									<td colspan="3">
										<!-- field to display bound checking errors -->
										<div class="formError">
											<h:message for="longitudeStart" />
										</div>
									</td>
								</tr>
							</table>
						</p>

						<!-- End of "set data for Startpoint" section -->


						<!-- Beginning of "set data for Endpoint" section -->

						<p>
							<div class="formLabel">#{msgs.rideDestinationAddress}</div>
							<div class="formInput">
								<h:inputTextarea id="endPoint" value="#{newride.endptAddress}"
									required="true"
									requiredMessage="#{errormessages.EndpointAddressIsNullWhenCreatingRequest}" />
							</div>
							<div class="formError">
								<!-- display error if applies -->
								<h:message for="endPoint" />
							</div>
							<div class="formInput">
								<h:commandLink value="#{msgs.geolocationSelectPlace}"
									action="pickpoint" immediate="true">
									<!-- point parameters -->
									<f:param name="#{point.paramTargetURL}"
										value="#{HTTPUser.URLBase}/faces/protected/rider/rideCreate.xhtml" />
									<!-- set the target parameters, so we know which point to update -->
									<f:param name="#{point.paramTarget}"
										value="#{newride.paramValueTargetEndpoint}" />

									<!-- webflow parameters -->

									<f:param name="#{webflow.paramBack}" value="rider.rideCreate" />
									<f:param name="#{webflow.paramFinish}" value="rider.rideCreate" />
									<f:param name="#{webflow.paramCancel}" value="rider.rideCreate" />

								</h:commandLink>
							</div>

							<h:inputHidden id="latitudeEnd" value="#{newride.latitudeEnd}"
								validator="de.avci.joride.utils.validators.JorideLatitudeValidator" />

							<h:inputHidden id="longitudeEnd" value="#{newride.longitudeEnd}"
								validator="de.avci.joride.utils.validators.JorideLongitudeValidator" />

							<table>

								<!-- show numerical coordinates only if capability is turned on -->
								<ui:fragment rendered="#{jprofile.showCoordinatesCapability}">
									<tr>
										<td class="formLabel">#{msgs.geolocationLatitude}</td>
										<td>:</td>
										<td class="formInput">#{newride.latitudeEnd}</td>
									</tr>
								</ui:fragment>
								<tr>
									<td colspan="3">
										<!-- field to display bound checking errors -->
										<div class="formError">
											<h:message for="latitudeEnd" />
										</div>
									</td>
								</tr>


								<!-- show numerical coordinates only if capability is turned on -->
								<ui:fragment rendered="#{jprofile.showCoordinatesCapability}">
									<tr>
										<td class="formLabel">#{msgs.geolocationLongitude}</td>
										<td>:</td>
										<td class="formInput">#{newride.longitudeEnd}</td>
									</tr>
								</ui:fragment>
								<tr>
									<td colspan="3">
										<!-- field to display bound checking errors -->
										<div class="formError">
											<h:message for="longitudeEnd" />
										</div>
									</td>
								</tr>
							</table>
						</p>


						<!-- End of "set data for Endpoint" section -->



						<div class="formLabel">#{msgs.rideStarttimeEarliest}</div>
						<div class="formInput">
							<p:calendar value="#{newride.starttimeEarliest}"
								id="starttimeEarliestCal" locale="#{HTTPUser.getLocale()}"
								pattern="#{datetime.tsformat}" mode="popup" navigator="true"
								showOn="button" timezone="#{HTTPUser.timeZone}"
								mindate="#{jprofile.currentDatetimeFormatted}"
								maxdate="#{jprofile.planningHorizonRequestsFormatted}">

								<f:converter converterId="rideDateConverter" />
								<p:ajax update="starttimeEarliestCal" />

							</p:calendar>
						</div>
						<div class="formLabel">#{msgs.rideStarttimeLatest}</div>
						<div class="formInput">
							<p:calendar value="#{newride.starttimeLatest}"
								id="starttimeLatestCal" locale="#{HTTPUser.getLocale()}"
								pattern="#{datetime.tsformat}" mode="popup" navigator="true"
								showOn="button" timezone="#{HTTPUser.timeZone}"
								mindate="#{jprofile.currentDatetimeFormatted}"
								maxdate="#{jprofile.planningHorizonRequestsFormatted}">

								<f:converter converterId="rideDateConverter" />
								<p:ajax update="starttimeLatestCal" />
							</p:calendar>
						</div>



						<div class="formLabel">#{msgs.rideNoPassengers}</div>
						<div class="formInput">
							<h:inputText value="#{newride.noPassengers}">
								<f:convertNumber integerOnly="true" />
							</h:inputText>
						</div>

						<div class="formLabel">#{msgs.ridePrice}</div>
						<div class="formInput">
							<h:inputText value="#{newride.price}" />
						</div>

						<!-- comment -->
						<div class="formLabel">#{msgs.rideComment}</div>

						<div class="formInput">
							<h:inputTextarea value="#{newride.comment}" />
						</div>

						<!--- Submit Data to create a new RideRequest -->


						<p:commandButton value="#{msgs.rideCreateNewRequest}"
							actionListener="#{newride.doCrudAction}"
							action="rider.rideDisplayNewRide" ajax="false">

							<f:param name="#{crud.paramNameCrudAction}"
								value="#{crud.paramValueCrudCreate}" />
							<f:param name="#{webflow.getParamFinish()}" value="rider" />

						</p:commandButton>


					</h:form>
				</p:panel>

			</p>

			<!-- form for entering ride data -->
			<p>

				<!-- webflow stanza -->
				#{webflow.smartUpdate()}
				<h:form>
					<table>
						<tr>
							<td><p:commandButton id="backlink"
									icon="ui-icon-triangle-1-w" action="#{webflow.getBack()}"
									ajax="false" /> <p:tooltip for="backlink" value="#{msgs.back}" />
							</td>
							<td><h:commandLink value="#{msgs.back}"
									action="#{webflow.getBack()}" /></td>
						</tr>
					</table>
				</h:form>
			</p>


		</ui:define>




	</ui:composition>





</body>
</html>
