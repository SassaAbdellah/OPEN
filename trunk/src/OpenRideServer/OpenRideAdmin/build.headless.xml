<?xml version="1.0" encoding="UTF-8"?>
<project name="OpenRideAdmin" default="all" basedir=".">
    <description>Builds the project OpenRideServerWeb.</description>



    <!-- TODO: Strangely, minify originally concatenated right into the build.dir  -->
    <property name="build.dir" value="build" />

    <!-- dist.dir is the directory where the war gets created -->
    <property name="dist.dir" value="dist" />

    <!-- classes.dir is the directory where the classes are compiled to -->
    <property name="classes.dir" value="${build.dir}/classes" />

     <!-- *** external libs and jee libs are                                   *** -->
     <!-- *** imported from the OpenRideServer-ejb project                      *** -->
    <property name="lib.dir"                 value="../OpenRideServer-ejb/libs/"                       />
    <!-- ***  libs imported from the Appserver, currently fixed to gf.3.0.2,   *** -->
    <!-- ***  TODO: make jee.lib.dir configurable                              *** -->
    <property name="jee.lib.dir"             value="../OpenRideServer-ejb/libs.glassfish.3.0.2"        />
    <!-- ***  EJB contains classes imported in OpenRideServerRS                *** -->
    <!-- ***  TODO: check if this exists before importing, give errormessage   *** -->
    <property name="OpenRideServer-ejb.jar"  value="../OpenRideServer-ejb/dist/OpenRideServer-ejb.jar" />









 
   <!-- ************************************************************ -->
   <!-- *** target build: compile classes, add properties files  *** -->
   <!-- ************************************************************ -->


   <target name="build">

   <!-- *** ensure that build.dir is there   *** -->
   <mkdir dir="${build.dir}" />


   <!-- ******************************************* -->
   <!-- *** compile java classes to classes.dir *** -->
   <!-- ******************************************* -->
   <mkdir dir="${classes.dir}" />

   <javac srcdir="src/java" destdir="${classes.dir}" > 
      <classpath>
 	<fileset dir="${lib.dir}">
		<include name="**/*.jar" />
	</fileset>

	<fileset dir="${jee.lib.dir}">
            <include name="**/*.jar" />
	</fileset>

	<fileset file="${OpenRideServer-ejb.jar}" />

      </classpath>  
     </javac>

     <!-- copy propertiy files to build.dir -->	
     <copy  todir="${classes.dir}/de/fhg/fokus/openride/webclient/" >
      <fileset dir="src/java/de/fhg/fokus/openride/webclient/" >
        <include name="**/*.properties" />
      </fileset>
     </copy> 

   </target>  <!-- end of target "build" -->


 
    <!-- ******************************************** -->
    <!-- ***  target "dist": create the war file  *** -->	
    <!-- ******************************************** -->
    
  <target name="dist" depends="build" >


    <!-- create destination directory -->  
    <mkdir dir="${dist.dir}" />




      <war destfile="${dist.dir}/${ant.project.name}.war" needxmlfile="false" >

        <!-- Include classes ***************************** -->
        <classes dir="${classes.dir}" />

        <!-- include some libs from ejb project.                    ******* -->
        <!-- TODO: some of these libs may not be necessary, check!  ******* -->
      
       <lib dir="${lib.dir}"> 

          <include name="commons-el.jar"/> 
          <include name="commons-fileupload-1.2.1.jar"/>
          <include name="commons-io-1.4.jar"/>
 	  <include name="commons-lang-2.4.jar"/>
	  <include name="commons-logging-1.1.1.jar"/>
	  <include name="commons-validator-1.3.1.jar"/>
	  <include name="jakarta-oro-2.0.8.jar"/>
	  <include name="OpenRideExternalLibsAndLicenses.docx"/>
	  <include name="OpenRideExternalLibsAndLicenses.pdf"/>
           
          <!-- TODO: maybe one of these tomahawks should go away. But which one? -->
           
 	  <include name="tomahawk12-1.1.9.jar"/>
	  <include name="tomahawk-1.1.9.jar"/>
 
       </lib>

        <zipfileset dir="web" />

      </war>

    </target> <!-- end of target "dist" -->

    
    <!-- ****************************************** -->
    <!-- ***  clean dist and build directories  *** -->	
    <!-- ****************************************** -->
   <target name="clean">
	<delete dir="${dist.dir}"  />
	<delete dir="${build.dir}" />
   </target> <!-- end of target "clean" -->

  
   <!-- ******************************************* -->
   <!-- *** target "all" :  do clean, then dist *** -->
   <!-- ******************************************* -->
   <target name="all"  depends="clean,dist"  />
    
</project>
