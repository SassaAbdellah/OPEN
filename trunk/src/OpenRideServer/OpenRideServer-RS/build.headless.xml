<?xml version="1.0" encoding="UTF-8"?>
<project name="OpenRideServer-RS" default="all" basedir=".">
    <description>Builds the project OpenRideServer-RS.</description>



    <!-- build.dir is where classes get created and where minified js goes  -->
    <property name="build.dir" value="build" />

    <!-- dist.dir is the directory where the war gets created -->
    <property name="dist.dir" value="dist" />

    <!-- classes.dir is the directory where the classes are compiled to -->
    <property name="classes.dir" value="${build.dir}/classes" />

     <!-- *** external libs and jee libs are                                   *** -->
     <!-- *** imported from the OpenRideServer-ejb project                      *** -->
    <property name="ejb.lib.dir"              value="../OpenRideServer-ejb/libs/"                       />
    <!-- ***  libs imported from the Appserver, currently fixed to gf.3.0.2,   *** -->
    <!-- ***  TODO: make jee.lib.dir configurable                              *** -->
    <property name="jee.lib.dir"             value="../OpenRideServer-ejb/libs.glassfish.3.0.2"        />
    <!-- ***  EJB contains classes imported in OpenRideServerRS                *** -->
    <!-- ***  TODO: check if this exists before importing, give errormessage   *** -->
    <property name="OpenRideServer-ejb.jar"  value="../OpenRideServer-ejb/dist/OpenRideServer-ejb.jar" />





    <!-- ************************************************************************ -->	
    <!-- *** Load local properties file from OpenRideServer project           *** -->
    <!-- ************************************************************************ -->	
    <target name="loadLocalProperties">
	
         <fail message=" ../local.properties file is missing! -- You will probably have to create one, see included local.properties.sample file. ">
            <condition>
                <not>
                	<resourcecount count="1">
                        	<fileset id="fs" dir=".." includes="local.properties"/>
                	</resourcecount>
                </not>
           </condition>
        </fail>

     <!-- *** So, as localconf is in place, we can happily load the local.properties  *** -->
     	 <loadproperties>
      		<file file="../local.properties"/>
     	</loadproperties>
 



    </target>


    <!-- ************************************************************************* -->
    <!-- *** replace old fhg google maps api key with new google maps api key  *** -->
    <!-- ************************************************************************* -->
  
    <target name="replaceMapsKey" depends="loadLocalProperties" description="replace old fhg google maps api key with new google maps api key" >


        <!-- ** The old google maps api key, as used by openride before February 2012 ** -->
        <!-- ** This is used as a replace pattern                                     ** -->

 	<property name="google.maps.api.key.old"      value="ABQIAAAAoSWXXJZugJPtUdFu909RAxTD2GVBSqiZP_F5qZEDROiHhhxT8xSZpnmbzCsuDrWT8KbVZVMddEMz8A" />   
        
       <echo> 
           replacing  default GoogleMapsApi Key     : ${google.maps.api.key.old} 
           with       individual GoogleMapsApi Key  : ${google.maps.api.key}
       </echo>


     <replace file="${build.dir}/web/view/test/index3.html"              token="${google.maps.api.key.old}" value="${google.maps.api.key}" />
     <replace file="${build.dir}/web/view/test/index.html"               token="${google.maps.api.key.old}" value="${google.maps.api.key}" />
     <replace file="${build.dir}/web/view/test/test.html"                token="${google.maps.api.key.old}" value="${google.maps.api.key}" />
     <replace file="${build.dir}/web/view/test/index_independent.html"   token="${google.maps.api.key.old}" value="${google.maps.api.key}" />
     <replace file="${build.dir}/web/view/test/index2.html"              token="${google.maps.api.key.old}" value="${google.maps.api.key}" />
     <replace file="${build.dir}/web/view/test/index4.html"              token="${google.maps.api.key.old}" value="${google.maps.api.key}" />
     <replace file="${build.dir}/web/WEB-INF/jspf/view_header_prod.jsp"  token="${google.maps.api.key.old}" value="${google.maps.api.key}" />
     <replace file="${build.dir}/web/WEB-INF/jspf/view_header_dev.jsp"   token="${google.maps.api.key.old}" value="${google.maps.api.key}" />

    </target>  <!-- end of target "replaceMapsKey" -->






    <!-- **************************************************************** -->
    <!-- *** target "minify":  minify and concatenate javascript libs *** -->
    <!-- **************************************************************** -->

    
    <target name="minify" description="minify and concatenate javascript libs">  

        <!--  ***  minify will concatenate all of our non-TinyMCE javascripts and stylesheets *** -->
        <!--  *** then use the YUI compressor library to compress them                        *** -->
  

        <!--${libs} is path to the downloaded jars -->

        <property
            name="yui-compressor.jar"
            location="./lib/yuicompressor-2.4.2.jar" />
        <property
            name="yui-compressor-ant-task.jar"
            location="./lib/yui-compressor-ant-task-0.5.jar" />

        <path id="task.classpath">
            <pathelement location="${yui-compressor.jar}" />
            <pathelement location="${yui-compressor-ant-task.jar}" />
        </path>

        <!-- yui-compressor task definition -->
        <taskdef
            name="yui-compressor"
            classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
            <classpath refid="task.classpath" />
        </taskdef>


        <!-- create build.dir and build.web.dir  -->

        <mkdir dir="${build.dir}/web" />

        <!-- concatenation of javascript -->
        <echo message="Building global.js" />
        <concat destfile="${build.dir}/web/view/js/global.js" force="no">
            <!-- explicitly order js concat because ordering matters here -->
            <fileset dir="${build.dir}" includes="web/controller/libs/jquery-1.4.2.min.js" />
            <fileset dir="${build.dir}" includes="web/controller/libs/gears_init.js" />
            <fileset dir="${build.dir}" includes="web/view/js/uitablist.js" />
            <fileset dir="${build.dir}" includes="web/controller/libs/stringbuilder.js" />
            <fileset dir="${build.dir}" includes="web/view/js/ui_core.js" />
            <fileset dir="${build.dir}" includes="web/controller/libs/json2.js" />
            <fileset dir="${build.dir}" includes="web/view/js/ui_tabs.js" />
            <fileset dir="${build.dir}" includes="web/controller/initcontroller.js" />
            <fileset dir="${build.dir}" includes="web/controller/serverconnector.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/native.module.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/mapmanager.module.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/offer.module.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/search.module.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/favorites.module.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/ratings.module.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/profile.module.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/calendar.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/modulemanager.js" />
            <fileset dir="${build.dir}" includes="web/controller/modules/eventlistener.module.js" />
            <fileset dir="${build.dir}" includes="web/view/js/mdetect.js" />

        </concat>

        <echo message="Building global-body.js" />
        <concat destfile="${build.dir}/web/view/js/global-body.js" force="no">
            <!-- explicitly order js concat because ordering matters here -->
            <fileset dir="${build.dir}" includes="web/view/js/overlay_dialog.js" />
            <fileset dir="${build.dir}" includes="web/view/js/progress_dialog.js" />

        </concat>

        <!-- concatenation of cascading stylesheets -->
        <echo message="Building global.css" />
        <concat destfile="${build.dir}/web/view/css/global.css" force="no">
            <fileset dir="${build.dir}" includes="web/view/css/style.css" />
            <fileset dir="${build.dir}" includes="web/view/css/footer.css" />
        </concat>

        <!-- invoke compressor -->
        <yui-compressor warn="false" munge="true" preserveallsemicolons="false" charset="UTF-8" fromdir="${build.dir}" todir="${build.dir}">
            <include name="web/view/js/global.js" />
            <include name="web/view/js/global-body.js" />
            <include name="web/view/css/global.css" />
            <include name="web/welcome_script.js" />
            <include name="web/welcome_style.css" />
        </yui-compressor>

    </target>

    <!--
   * purge-src takes our compressed files, moves them to the base /common dir
   * and deletes the source js and css dirs from the build dir
   -->
    <!--target name="purge-src" depends="minify">
        <echo message="Purging javascript and stylesheet sources" />

        <move file="${build.dir}/web/common/js/global-min.js" tofile="${build.dir}/web/common/global.js"/>
        <move file="${build.dir}/web/common/css/global-min.css" tofile="${build.dir}/web/common/global.css"/>

        <delete dir="${build.dir}/web/common/js" />
        <delete dir="${build.dir}/web/common/css" />

    </target-->



 
   <!-- ************************************************************** -->
   <!-- *** target "build" :compile classes, run minify on js libs *** -->
   <!-- ************************************************************** -->


   <target name="build">

   <!-- *** ensure that build.dir is there   *** -->
   <mkdir dir="${build.dir}" />


   <!-- ******************************************* -->
   <!-- *** compile java classes to classes.dir *** -->
   <!-- ******************************************* -->
   <mkdir dir="${classes.dir}" />


   <!-- *** Compile Standard Classes  *** -->

   <javac srcdir="src/java" destdir="${classes.dir}" > 
      <classpath>
 	<fileset dir="${ejb.lib.dir}">
		<include name="**/*.jar" />
	</fileset>

	<fileset dir="${jee.lib.dir}">
            <include name="**/*.jar" />
	</fileset>

	<fileset file="${OpenRideServer-ejb.jar}" />

      </classpath>  
     </javac>


   <!-- *** Compile additional Jersey Artefacts for headless build  *** -->


   <javac srcdir="src.headless" destdir="${classes.dir}" >



      <classpath>
	<fileset dir="${jee.lib.dir}">
            <include name="**/*.jar" />
	</fileset>
      </classpath>


 
   </javac>





   <!-- ************************************* -->
   <!-- *** copy web subdir to build.dir  *** -->  
   <!-- ************************************* -->
   <copy todir="${build.dir}/web">
     <fileset dir="web" />
   </copy>

   <!-- ************************************* -->
   <!-- apply actual google maps key          -->
   <!-- ************************************* --> 
   <antcall target="replaceMapsKey"  inheritall="true" inheritrefs="true" />

   <!-- ************************************* -->
   <!-- ***   run minify on build.dir     *** -->
   <!-- ************************************* -->
   <antcall target="minify"  inheritall="true" inheritrefs="true" />



   </target>  <!-- end of target "build" -->


 
    <!-- ********************************************* -->
    <!-- ***  target "dist" : create the war file  *** -->	
    <!-- ********************************************* -->
    
  <target name="dist" depends="build" >



    <!-- create destination directory -->  
    <mkdir dir="${dist.dir}" />




      <war destfile="${dist.dir}/${ant.project.name}.war" needxmlfile="false" >

        <!-- Include classes ***************************** -->
        <classes dir="${classes.dir}" />

        <!-- include some libs from ejb project.                    ******* -->
        <!-- TODO: some of these libs may not be necessary, check!  ******* -->
      
       <lib dir="${ejb.lib.dir}"> 

          <include name="commons-fileupload-1.2.1.jar"   />
          <include name="commons-logging-api-1.1.1.jar"  />
          <include name="dwr.jar"                        />
          
          <!-- TODO: I doubt that junit and junitee belong to delivery!  -->
          <include name="junitee.jar"                    /> 
          <include name="junit.jar"                      />
          
          <include name="postgis_1.3.6.jar"              />
          <include name="xpp3_min-1.1.4c.jar"            />
          <include name="xstream-1.3.1.jar"              />
 
       </lib>

        <zipfileset dir="${build.dir}/web" />

      </war>

    </target> <!-- end of target "dist" -->

    
    <!-- ******************************************************** -->
    <!-- *** target clean:  clean dist and build directories  *** -->	
    <!-- ******************************************************** -->
   <target name="clean">
	<delete dir="${dist.dir}"  />
	<delete dir="${build.dir}" />
   </target> <!-- end of target "clean" -->


   
   <!-- ******************************************* -->
   <!-- *** target "all" :  do clean, then dist *** -->
   <!-- ******************************************* -->

   <target name="all"  depends="clean,dist"  />
    
</project>
