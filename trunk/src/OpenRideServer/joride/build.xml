<project name="joride" default="build">
	<property environment="env" />
	<property file="build.properties" />
	<property file="${app}/tomcat.properties" />
	<property name="appdir" value="${basedir}" />
	<property name="build.dir" value="${appdir}/build" />
	<property name="web-inf.dir" value="${build.dir}/WEB-INF" />
	<property name="dist.dir" value="${appdir}/dist" />
	<!-- warfile which ist the main deliverable of this subproject -->
	<property name="warfile" value="${dist.dir}/${ant.project.name}.war" />
	<!-- jarfile for use by other subprojects (say: joride-public)-->
	<property name="jarfile" value="${dist.dir}/${ant.project.name}.jar" />

	<path id="classpath">
		<fileset dir="${appdir}">
			<include name="lib/*.jar" />
			<include name="lib/build/*.jar" />
		</fileset>
		<!-- include classes from ejb project -->
		<pathelement location="../OpenRideServer-ejb/dist/OpenRideServer-ejb.jar" />

		<!-- external jars from ejb project  -->
		<fileset dir="../OpenRideServer-ejb/libs/">
			<include name="*.jar" />
		</fileset>

		<!-- include jee libs from some glassfish -->

		<fileset dir="../OpenRideShareMaster/build.headless.support/jee/libs.glassfish.3.0.2/">
			<include name="*.jar" />
		</fileset>


	</path>

	<!-- TARGET prepare -->
	<target name="prepare" description="Create build and dist directory.">
		<delete dir="${build.dir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${web-inf.dir}" />
		<mkdir dir="${web-inf.dir}/classes" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- TARGET copy -->
	<target name="copy" depends="prepare" description="Copy files to build directory.">
		<copy todir="${build.dir}" failonerror="false" verbose="true">
			<fileset dir="${appdir}/web" />
		</copy>
		<copy todir="${web-inf.dir}/classes" failonerror="false" verbose="true">
			<fileset dir="${appdir}/src/java">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${web-inf.dir}" failonerror="false" verbose="true">
			<fileset dir="${appdir}">
				<include name="lib/**" />
			</fileset>
		</copy>
	</target>



	<!-- TARGET apply-local-properties -->
	<target name="apply-local-properties" depends="copy" description="rewrite properties files with local properties">

		<!-- check, that user has a local.properties file in place in master project -->


		<property file="../OpenRideShareMaster/local.properties" />

		<fail message=" ../OpenRideShareMaster/local.properties file is missing! -- You will probably have to create one, see included local.properties.sample file. ">
			<condition>
				<not>
					<resourcecount count="1">
						<fileset id="fs" dir="../OpenRideShareMaster/" includes="local.properties" />
					</resourcecount>
				</not>
			</condition>
		</fail>




		<!-- ****************************  -->
		<!-- Rewrite operational setting   -->
		<!-- ****************************  -->


		<property name="opsparamfile" value="${build.dir}/WEB-INF/classes/de/avci/joride/operational.properties" />
		<!-- replace email target -->
		<!-- replacing mailServiceJNDI property with local settings  -->

		<replaceregexp byline="true">
			<regexp pattern="mailServiceJNDI=(.*)" />
			<substitution expression="mailServiceJNDI=${mailServiceJNDI}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>


		<!-- replacing mailServiceJNDI property with local settings  -->

		<replaceregexp byline="true">
			<regexp pattern="mobile=(.*)" />
			<substitution expression="mobile=${mobile}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>


		<!-- replacing   webmasterEmailRecipient property with local settings  -->

		<replaceregexp byline="true">
			<regexp pattern="webmasterEmailRecipient=(.*)" />
			<substitution expression="webmasterEmailRecipient=${webmasterEmailRecipient}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>


		<!-- replacing  businessEmailRecipient  property with local settings  -->

		<replaceregexp byline="true">
			<regexp pattern="businessEmailRecipient=(.*)" />
			<substitution expression="businessEmailRecipient=${businessEmailRecipient}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- replacing  noreplyEmailRecipient  property with local settings  -->

		<replaceregexp byline="true">
			<regexp pattern="noreplyEmailRecipient=(.*)" />
			<substitution expression="noreplyEmailRecipient=${noreplyEmailRecipient}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!--  applying geocoding service settings -->
		<replaceregexp byline="true">
			<regexp pattern="geocoding=(.*)" />
			<substitution expression="geocoding=${geocoding}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>


		<!--  applying webmapper service settings -->
		<replaceregexp byline="true">
			<regexp pattern="geomapper=(.*)" />
			<substitution expression="geomapper=${geomapper}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- wether or not the cookie warning should be shown  -->

		<replaceregexp byline="true">
			<regexp pattern="showCookieMessage=(.*)" />
			<substitution expression="showCookieMessage=${showCookieMessage}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>



		<!-- *********************************** -->
		<!-- enable/disable frontend capabilitis -->
		<!-- *********************************** -->

		<!-- turn on/off functionality for acting as a driver -->
		<replaceregexp byline="joride_capability_driver">
			<regexp pattern="joride_capability_driver=(.*)" />
			<substitution expression="joride_capability_driver=${joride_capability_driver}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- turn on/off functionality for acting as a rider/passenger -->
		<replaceregexp byline="joride_capability_passenger">
			<regexp pattern="joride_capability_passenger=(.*)" />
			<substitution expression="joride_capability_passenger=${joride_capability_passenger}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- turn on/off functionality for rating others -->
		<replaceregexp byline="joride_capability_rating">
			<regexp pattern="joride_capability_rating=(.*)" />
			<substitution expression="joride_capability_rating=${joride_capability_rating}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- turn on/off functionality for updates in menue items -->
		<replaceregexp byline="joride_capability_updateMenuItem">
			<regexp pattern="joride_capability_updateMenuItem=(.*)" />
			<substitution expression="joride_capability_updateMenuItem=${joride_capability_updateMenuItem}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>


		<!-- turn on/off visibility of search menue item -->
		<replaceregexp byline="joride_capability_searchMenuItem">
			<regexp pattern="joride_capability_searchMenuItem=(.*)" />
			<substitution expression="joride_capability_searchMenuItem=${joride_capability_searchMenuItem}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- turn on/off functionality for polling for updates and displaying -->
		<!-- updates and messages in page headers                             -->
		<replaceregexp byline="joride_capability_messageDisplay">
			<regexp pattern="joride_capability_messageDisplay=(.*)" />
			<substitution expression="joride_capability_messageDisplay=${joride_capability_messageDisplay}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- let drivers add waypoints, i.e change routes calculated by routing engine on/off -->

		<replaceregexp byline="joride_capability_waypoints">
			<regexp pattern="joride_capability_waypoints=(.*)" />
			<substitution expression="joride_capability_waypoints=${joride_capability_waypoints}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>



		<!-- wheter or not to have favorite places to chose from -->
		<replaceregexp byline="joride_capability_favoritePlaces">
			<regexp pattern="joride_capability_favoritePlaces=(.*)" />
			<substitution expression="joride_capability_favoritePlaces=${joride_capability_favoritePlaces}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- wheter or not to have current position when choosing places  -->
		<replaceregexp byline="joride_capability_currentPosition">
			<regexp pattern="joride_capability_currentPosition=(.*)" />
			<substitution expression="joride_capability_currentPosition=${joride_capability_currentPosition}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- wheter or not to have geocoding (Google,Nominatim) when choosing places  -->
		<replaceregexp byline="joride_capability_geocodingServices">
			<regexp pattern="joride_capability_geocodingServices=(.*)" />
			<substitution expression="joride_capability_geocodingServices=${joride_capability_geocodingServices}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>

		<!-- wheter or not to show Coordinates when picking start/end/waypoints  -->
		<replaceregexp byline="joride_capability_showCoordinates">
			<regexp pattern="joride_capability_showCoordinates=(.*)" />
			<substitution expression="joride_capability_showCoordinates=${joride_capability_showCoordinates}" />
			<fileset file="${opsparamfile}" />
		</replaceregexp>



		<!-- ****************************  -->
		<!-- Rewrite navigation settings   -->
		<!-- ****************************  -->

		<property name="navparamfile" value="${build.dir}/WEB-INF/classes/de/avci/joride/navigation.properties" />


		<!-- applying url for terms and conditions  -->

		<replaceregexp byline="true">
			<regexp pattern="termsURL=(.*)" />
			<substitution expression="termsURL=${termsURL}" />
			<fileset file="${navparamfile}" />
		</replaceregexp>

		<!-- applying url for imprint  -->

		<replaceregexp byline="true">
			<regexp pattern="imprintURL=(.*)" />
			<substitution expression="imprintURL=${imprintURL}" />
			<fileset file="${navparamfile}" />
		</replaceregexp>

		<!-- applying url for screen being shown after logging out -->
		<replaceregexp byline="true">
			<regexp pattern="urlLoggedOut=(.*)" />
			<substitution expression="urlLoggedOut=${urlLoggedOut}" />
			<fileset file="${navparamfile}" />
		</replaceregexp>


		<!--  applying url of OpenLayers library -->
		<replaceregexp byline="true">
			<regexp pattern="urlOpenLayers=(.*)" />
			<substitution expression="urlOpenLayers=${urlOpenLayers}" />
			<fileset file="${navparamfile}" />
		</replaceregexp>




		<!-- ****************************  -->
		<!-- Rewrite update parameters     -->
		<!-- ****************************  -->

		<property name="updateparamfile" value="${build.dir}/WEB-INF/classes/de/avci/joride/update.properties" />

		<!-- apply update interval  -->

		<replaceregexp byline="true">
			<regexp pattern="updateInterval=(.*)" />
			<substitution expression="updateInterval=${updateInterval}" />
			<fileset file="${updateparamfile}" />
		</replaceregexp>

		<!-- apply growl interval  -->

		<replaceregexp byline="true">
			<regexp pattern="growlInterval=(.*)" />
			<substitution expression="growlInterval=${growlInterval}" />
			<fileset file="${updateparamfile}" />
		</replaceregexp>




		<!-- ****************************  -->
		<!-- Rewrite datetime settings   -->
		<!-- ****************************  -->

		<property name="datetimefile" value="${build.dir}/WEB-INF/classes/de/avci/joride/datetime.properties" />


		<!--  apply user proved timezone -->
		<replaceregexp byline="true">
			<regexp pattern="defaulttimezone=(.*)" />
			<substitution expression="defaulttimezone=${defaulttimezone}" />
			<fileset file="${datetimefile}" />
		</replaceregexp>



		<!-- set theme to something different from default theme "aristo"-->

		<antcall target="overwriteTheme" inheritAll="true" inheritRefs="true" />

	</target>
	<!--  end of target "apply local properties" -->



	<!-- Apply customized rideCreate.xhtml and/or driveCreate.xhtml -->
	<target name="applyCustomization" if="applyCustomization" description="apply special customization">


		<echo> 
			******************************************************
			************** Applying customization ****************
			******************************************************
		</echo>


		<!-- TODO:  currently custumization.package is fixed to "thessaloniki"        -->
		<!-- when finished, the name of the customization package should be detected  -->



		<!-- xhtmls, message.property files and javascript for customization package lives  below "customization.dir" -->
		<property name="customization.dir" value="${appdir}/web/customization/${customization.package}" />


		<!-- overwrite driveCreate.xhtml and rideCreate.xhtml -->
		<copy file="${customization.dir}/driveCreate.xhtml" tofile="${build.dir}/protected/driver/driveCreate.xhtml" overwrite="true" verbose="true" />
		<!-- overwrite rideCreate.xhtml -->
		<copy file="${customization.dir}/rideCreate.xhtml" tofile="${build.dir}/protected/rider/rideCreate.xhtml" overwrite="true" verbose="true" />

		<!-- install custom properties -->
		<copy todir="${web-inf.dir}/classes/de/avci/joride" failonerror="false">
			<fileset dir="${customization.dir}/resources/properties/">
				<include name="*.properties" />
			</fileset>
		</copy>

		<!-- copy javascript files -->
		<copy todir="${build.dir}/resources/js/" failonerror="false">
			<fileset dir="${customization.dir}/resources/js/">
				<include name="*.js" />
			</fileset>
		</copy>
	</target>



	<!-- TARGET overwriteCSS -->
	<!-- overwriteCSS property should have been set in "war" target                  -->
	<!-- overwriteCSS is there to signify that a user defined stylesheet is in place -->
	<target name="overwriteCSS" if="overwriteCSS" description="overwrite css if user defined css is present">
		<property name="targetCSS" value="${build.dir}/resources/css/styles.css" />
		<echo message="Found individual CSS file, Overwriting ${targetCSS}" />
		<copy file="../OpenRideShareMaster/local.resources/css/local.styles.css" tofile="${targetCSS}" overwrite="true" verbose="true" />
	</target>



	<!-- TARGET overwriteTheme -->
	<!-- overwrite Theme will overwrite the settings for theme in web.xml    -->
	<!-- this task will be executed only if jquery.ui.theme parameter        -->
	<!-- in local.properties is set by the user                              -->
	<target name="overwriteTheme" if="jquery.ui.theme" description="overwrite primefaces theme on user request">

		<echo message="Found individual theme setting, overwriting default theme to ${jquery.ui.theme}" />

		<property name="webxmlFile" value="${build.dir}/WEB-INF/web.xml" />


		<!--  applying url of OpenLayers library -->
		<replaceregexp byline="true">
			<regexp pattern="aristo" />
			<substitution expression="${jquery.ui.theme}" />
			<fileset file="${webxmlFile}" />
		</replaceregexp>

	</target>

	<!-- TARGET compile -->
	<target name="compile" depends="copy,apply-local-properties,applyCustomization" description="Compile source files.">
		<javac srcdir="${appdir}/src/java" destdir="${web-inf.dir}/classes" debug="true" includeantruntime="false" deprecation="true">
			<compilerarg value="-Xlint:unchecked" />
			<include name="**/*.java" />
			<classpath refid="classpath" />
		</javac>
	</target>



	<!-- apply mobile settings if mobile parameter is set to *true* -->
	<target name="mobile" description="override faces-config and menu definition for use with primefaces-mobile" if="${mobile}">


		<!-- Currently, replaces "faces-config-mobile" with faces-config -->
		<!-- TODO: do something more sophisticated to avoud redundancy   -->
		<copy file="${web-inf.dir}/faces-config-mobile.xml" tofile="${web-inf.dir}/faces-config.xml" overwrite="true" failonerror="true" />


		<!-- Currently, replaces "toolbar.xhtml" with "toolbar-mobile.xhtml" -->
		<!-- TODO: do something more sophisticated to avoud redundancy   -->
		<copy file="${build.dir}/sections/joride/toolbar-mobile.xhtml" tofile="${build.dir}/sections/joride/toolbar.xhtml" overwrite="true" failonerror="true" />



	</target>





	<!-- TARGET jsf-libs -->
	<target name="jsf-libs" if="use-jsf-libs" unless="glassfish">
		<mkdir dir="${web-inf.dir}/lib" />
		<copy file="${jsf.api.jar}" todir="${web-inf.dir}/lib" verbose="true" />
		<copy file="${jsf.impl.jar}" todir="${web-inf.dir}/lib" verbose="true" />
	</target>

	<!-- TARGET el-libs -->
	<target name="el-libs" if="use-el-libs" unless="glassfish">
		<copy file="${el.api.jar}" todir="${web-inf.dir}/lib" verbose="true" failonerror="false" />
		<copy file="${el.impl.jar}" todir="${web-inf.dir}/lib" verbose="true" failonerror="false" />
	</target>

	<!-- TARGET bean-validation libs -->
	<target name="bean-validation-libs" if="use-bean-validation-libs" unless="glassfish">
		<copy file="${bean-validation.impl.jar}" todir="${web-inf.dir}/lib" verbose="true" failonerror="false" />
		<copy todir="${web-inf.dir}/lib" verbose="true" failonerror="false">
			<fileset dir="${bean-validation.lib.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<!-- TARGET cdi-libs -->
	<target name="cdi-libs" if="use-cdi-libs" unless="glassfish">
		<copy file="${cdi.impl.jar}" todir="${build.dir}/WEB-INF/lib" verbose="true" failonerror="false" />
	</target>

	<!-- TARGET tomcat-libs -->
	<target name="tomcat-libs" depends="jsf-libs, el-libs, bean-validation-libs, cdi-libs" />

	<!-- TARGET war -->
	<target name="war" depends="clean,compile,mobile,tomcat-libs" description="Build WAR file.">


		<!--Overwrite default css if localStyle has been defined elsewhere -->
		<available file="../OpenRideShareMaster/local.resources/css/local.styles.css" property="overwriteCSS" />
		<antcall target="overwriteCSS" inheritAll="true" inheritRefs="true" />

		<!-- ***************************************************************************************************** -->
		<!-- include all the jars in OpenRideShareMaster/local.resources/themes directory, so that custom themes will be supported -->
		<mkdir dir="${web-inf.dir}/lib" />
		<copy todir="${web-inf.dir}/lib" verbose="true">
			<fileset dir="../OpenRideShareMaster/local.resources/themes/">
				<include name="*.jar" />
			</fileset>
		</copy>

		<delete file="${warfile}" />
		<jar jarfile="${warfile}" basedir="${build.dir}" />
	</target>


	<!-- TARGET jar -->
	<!-- create a jar for use in other subprojects -->
	<target name="jar" depends="clean, compile, tomcat-libs" description="Build JAR file for use in other subprojects.">
		<delete file="${jarfile}" />
		<jar jarfile="${jarfile}" basedir="${web-inf.dir}/classes" />
	</target>



	<!-- TARGET build -->
	<target name="build" depends="war,jar" description="build the deliverables (war and jar files)">
	</target>


	<!-- TARGET dist -->
	<target name="dist" depends="build" description="create the distributables, but do not deploy">
	</target>

	<!-- target i18n -->
	<target name="i18n" depends="dist" description="create internationalisation tools">

	</target>


	<!-- TARGET install -->
	<target name="install" depends="build" description="Deploy web application.">
		<copy file="${warfile}" todir="${deploy.dir}" />
	</target>

	<!-- TARGET clean -->
	<target name="clean" description="Clean everything.">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

</project>
