<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui">


<h:head>
	<!-- enforce UTF 8. also, header is needed for primefaces to work  -->
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
</h:head>





<body>



	<ui:composition template="/templates/navbar1Layout.xhtml">


		<ui:define name="windowTitle">
                #{msgs.rideCreateNewRequest}
            </ui:define>

		<ui:define name="content">

			<!-- include google api  -->
			<script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"></script>

			<!--  ************************************************ -->
			<!--  Script below defines bounds for searching        -->
			<!--  these will be passed to google search engine     -->
			<!--  and results will be checked against these bounds -->
			<!--  as google interprets them as hint only           -->
			<!--  ************************************************ -->

			<script type="text/javascript">
			
				var north=#{boundaries.northernBound};
				var east=#{boundaries.easternBound};
				var south=#{boundaries.southernBound};
				var west=#{boundaries.westernBound};
			
				// Southwest bound
				var sw = new google.maps.LatLng(south,west);
				// northeast bound
				var ne = new google.maps.LatLng(north,east);
				// bounds created from corner
				var bounds = new google.maps.LatLngBounds(sw, ne);
				
				// localized errormessage if no results are returned
				var noResults="#{msgs.gelocationNoResult}";
			</script>


			<!-- ad hoc callback digester -->
			<h:outputScript library="js" name="callbackGoogleThessaloniki.js" />
     
            
                #{newride.initializeNewRide()}
                #{newride.smartUpdate()}

			
			<h1>#{msgs.rideCreateNewRequest}</h1>


			<!-- Display Request Limits -->
			<p>
				#{jprofile.updateFromDB()}
				<div class="formlabel">
					<h:outputFormat rendered="#{jprofile.canAddRequest}"
						value="#{msgs.limits_requestLimitMessage}">
						<f:param name="limits" value="#{jprofile.requestLimit}" />
					</h:outputFormat>
				</div>

				<div class="formlabel">
					<h:outputFormat rendered="#{jprofile.canAddRequest}"
						value="#{msgs.limits_requestsLeftMessage}">
						<f:param name="limits" value="#{jprofile.noLeftRequests}" />
					</h:outputFormat>
				</div>
			</p>

			<p>
				<!-- Show message that limit is exceeded if limit is exceeded -->
				<div class="formlabel">
					<h:outputFormat rendered="#{!jprofile.canAddRequest}"
						value="#{msgs.limits_requestLimitExceededMessage}">
						<f:param name="limits" value="#{jprofile.requestLimit}" />
					</h:outputFormat>
				</div>
			</p>
			<!-- Allow creation if limit is not exceeded -->

			<p>
				<p:panel>

					<h:form id="f1" rendered="#{jprofile.canAddRequest}">
						<!-- form for entering ride data -->

						<div class="formLabel">#{msgs.rideStartptAddress}</div>

						<p>
							<div class="formInput">
								<h:inputTextarea id="addressStart"
									value="#{newride.startptAddress}" required="true"
									requiredMessage="#{errormessages.StartpointAddressIsNullWhenCreatingOffer}"
									onchange="codeAddressWithGoogleStartPt()" />
							</div>
							<div class="formInput">
								<p:commandButton id="searchStart" icon="ui-icon-search"
									onclick="codeAddressWithGoogleStartPt()"
									 value="#{msgs.searchlabel}" 
									 />
							</div>

							<!-- command link for advanced search -->
							<div class="formInput">
								<h:commandLink value="#{msgs.geolocationAdvancedSearch}"
									action="pickpoint" immediate="true">

									<!-- point parameters -->
									<f:param name="#{point.paramTargetURL}"
										value="#{HTTPUser.URLBase}/faces/protected/rider/rideCreate.xhtml" />
									<!-- set the target parameters, so we know which point to update -->
									<f:param name="#{point.paramTarget}"
										value="#{newride.paramValueTargetStartpoint}" />

									<!-- webflow parameters -->

									<f:param name="#{webflow.paramBack}" value="rider.rideCreate" />
									<f:param name="#{webflow.paramFinish}" value="rider.rideCreate" />
									<f:param name="#{webflow.paramCancel}" value="rider.rideCreate" />

								</h:commandLink>
							</div>
						<div id="divErrorStart" class="formError">
							<!-- display error if applies -->
							<h:message for="addressStart" />
						</div>

						<!-- hidden inputs for start and endpoints will always be there, regardless of coordinate visibility -->
						<h:inputHidden id="latitudeStart" value="#{newride.latitudeStart}"
							validator="de.avci.joride.utils.validators.JorideLatitudeValidator" />

						<h:inputHidden id="longitudeStart"
							value="#{newride.longitudeStart}"
							validator="de.avci.joride.utils.validators.JorideLongitudeValidator" />

						<div class="formError">
							<h:message for="latitudeStart" />
						</div>
						<div class="formError">
							<h:message for="longitudeStart" />
						</div>
			</p>



			<div class="formLabel">#{msgs.rideDestinationAddress}</div>
			<p>
				<div class="formInput">
					<h:inputTextarea id="addressEnd" value="#{newride.endptAddress}"
						required="true"
						requiredMessage="#{errormessages.EndpointAddressIsNullWhenCreatingOffer}"
						onchange="codeAddressWithGoogleEndPt()" />
				</div>


				<div class="formInput">
					<p:commandButton id="searchEnd" icon="ui-icon-search"
						onclick="codeAddressWithGoogleEndPt()"
						value="#{msgs.searchlabel}" 
					/>
				</div>

				<!-- command link for advanced search -->
				<div class="formInput">
					<h:commandLink value="#{msgs.geolocationAdvancedSearch}"
						action="pickpoint" immediate="true">
						<!-- point parameters -->
						<f:param name="#{point.paramTargetURL}"
							value="#{HTTPUser.URLBase}/faces/protected/rider/rideCreate.xhtml" />
						<!-- set the target parameters, so we know which point to update -->
						<f:param name="#{point.paramTarget}"
							value="#{newride.paramValueTargetEndpoint}" />

						<!-- webflow parameters -->

						<f:param name="#{webflow.paramBack}" value="rider.rideCreate" />
						<f:param name="#{webflow.paramFinish}" value="rider.rideCreate" />
						<f:param name="#{webflow.paramCancel}" value="rider.rideCreate" />

					</h:commandLink>
				</div>
			<div id="divErrorEnd" class="formError">
				<!-- display error if applies -->
				<h:message for="addressEnd" />
			</div>


			<h:inputHidden id="longitudeEnd" value="#{newride.longitudeEnd}"
				validator="de.avci.joride.utils.validators.JorideLongitudeValidator" />
			<h:inputHidden id="latitudeEnd" value="#{newride.latitudeEnd}"
				validator="de.avci.joride.utils.validators.JorideLatitudeValidator" />

			<div class="formError">
				<h:message for="latitudeEnd" />
			</div>

			<div class="formError">
				<h:message for="longitudeEnd" />
			</div>

			</p>

			<div class="formLabel">#{msgs.rideStarttimeEarliest}</div>
			<div class="formInput">
				<!-- desktop version of calendar has a popup button -->
				<p:calendar 
					value="#{newride.starttimeEarliest}"
					id="starttimeEarliestCal" 
					locale="#{HTTPUser.getLocale()}"
					pattern="#{datetime.tsformat}" 
					mode="popup" 
					navigator="true"
				    timezone="#{HTTPUser.timeZone}"
					mindate="#{jprofile.currentDatetimeFormatted}"
					maxdate="#{jprofile.planningHorizonRequestsFormatted}"
					widgetVar="starttimeEarliestCal"
					showOn="button"
					rendered="#{HTTPUser.desktop}"
					>

					<f:converter converterId="rideDateCalendarConverter" />
					<p:ajax update="starttimeEarliestCal" />
					
				</p:calendar>
				
				<!-- mobile version of calendar has no popup, but frugal textfield only -->
				<p:calendar 
					value="#{newride.starttimeEarliest}"
					id="starttimeEarliestCalMobile" 
					locale="#{HTTPUser.getLocale()}"
					pattern="#{datetime.tsformat}" 
					mode="popup" 
					navigator="true"
				    timezone="#{HTTPUser.timeZone}"
					mindate="#{jprofile.currentDatetimeFormatted}"
					maxdate="#{jprofile.planningHorizonRequestsFormatted}"
					widgetVar="starttimeEarliestCal"
					showOn="no_button"
					rendered="#{HTTPUser.mobile}"
					>

					<f:converter converterId="rideDateCalendarConverter" />
					<p:ajax update="starttimeEarliestCal" />
					
				</p:calendar>
				
				
				
			</div>

			<!-- *********************************************************** -->
			<!--   timespan between starttime earliest and starttime latest  -->
			<!--          with only one field to specify an hour             -->
			<!-- *********************************************************** -->
			<h:outputScript library="js"
				name="timespanInputCheckThessaloniki03.js" />

			<!-- turn on use of timespan  -->
						#{newride.useTimespanFlagOn()}	

						<div class="formLabel">#{msgs.rideWaitFor}</div>
			<div class="formInput">
				<p:inputText value="#{newride.timespan.hours}" id="timespanHours"
					widgetVar="timespanHours" onchange="adjustHours()" size="2">
					<f:convertNumber integerOnly="true" />
				</p:inputText>
				<span class="formLabel">&nbsp;#{msgs.tu_hours}&nbsp;</span>
			</div>

			<div class="formLabel">#{msgs.rideNoPassengers}</div>
			<div class="formInput">
				<h:inputText value="#{newride.noPassengers}">
					<f:convertNumber integerOnly="true" />
				</h:inputText>
			</div>

			<div class="formLabel">#{msgs.ridePrice}</div>
			<div class="formInput">
				<h:inputText value="#{newride.price}" />
			</div>

			<!-- comment -->
			<div class="formLabel">#{msgs.rideComment}</div>

			<div class="formInput">
				<h:inputTextarea value="#{newride.comment}" />
			</div>

			<!--- Submit Data to create a new RideRequest -->


			<p:commandButton value="#{msgs.rideCreateNewRequest}"
				actionListener="#{newride.doCrudAction}"
				action="rider.rideDisplayNewRide" ajax="false">

				<f:param name="#{crud.paramNameCrudAction}"
					value="#{crud.paramValueCrudCreate}" />
				<f:param name="#{webflow.getParamFinish()}" value="rider" />

			</p:commandButton>
			</h:form>
			</p:panel>

			</p>

			<!-- form for entering ride data -->
			<p>

				<!-- webflow stanza -->
				#{webflow.smartUpdate()}
				<h:form>
					<table>
						<tr>
							<td><p:commandButton id="backlink"
									icon="ui-icon-triangle-1-w" action="#{webflow.getBack()}"
									ajax="false" /> <p:tooltip for="backlink" value="#{msgs.back}" />
							</td>
							<td><h:commandLink value="#{msgs.back}"
									action="#{webflow.getBack()}" /></td>
						</tr>
					</table>
				</h:form>
			</p>


		</ui:define>




	</ui:composition>





</body>
</html>
