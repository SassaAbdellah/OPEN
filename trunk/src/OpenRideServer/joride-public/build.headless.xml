<project name="joride-public" default="build"> 

<!--****  ******************************************  ****-->
<!--****   Buildfile for joride-public webapp         ****-->
<!--****   this is in fact a subset of the            ****-->
<!--****   joride webapp.                             ****-->
<!--****   note, that much of the code is copied from ****-->
<!--****  ../joride/ for good reasons                 ****-->
<!--**** ******************************************** ****-->   


   <property environment="env"/>
   <property file="build.properties"/> 
   <property file="${app}/tomcat.properties"/> 
   <property name="appdir" value="${basedir}"/>
   <property name="build.dir" value="${appdir}/build"/>
   <property name="dist.dir" value="${appdir}/dist"/>
   <property name="warfile" value="${dist.dir}/${ant.project.name}.war"/>
   
   <path id="classpath">
      <fileset dir="${appdir}">        
        <include name="lib/build/*.jar"/>
      </fileset> 
        <!-- include classes from ejb project -->
        <pathelement location="../OpenRideServer-ejb/dist/OpenRideServer-ejb.jar" />
 
        <!-- external jars from ejb project  -->
      <fileset dir="../OpenRideServer-ejb/libs/">        
	<include name="*.jar"	/>
      </fileset>

      <!-- include jee libs from some glassfish -->

      <fileset dir="../build.headless.support/jee/libs.glassfish.3.0.2/">
	<include name="*.jar"	/>
      </fileset>

   </path>


  <target name="synchronize" description="Synchronize with joride project"> 
 	
	
	<!-- directory where the joride project lives and where things are copied from -->
	<property name="joride.dir" value="../joride/" />

	<!-- webdir of this project -->
	<property name="web.dir" value="${appdir}/web"/>	
	
	<!-- webdir of joride project -->
	<property name="joride.web.dir" value="${joride.dir}/web"/>		


	<!-- completely synchronize web/resources directory with joride -->	
	<property name="resources.dir" value="${web.dir}/resources/" />
	<delete dir="${resources.dir}"/>
	<copy todir="${resources.dir}">
		<fileset dir="${joride.web.dir}/resources/"/>
	</copy>

	<!-- completely synchronize web/templates directory with joride -->	
	<property name="templates.dir" value="${web.dir}/templates/" />
	<delete dir="${templates.dir}"/>
	<copy todir="${templates.dir}">
		<fileset dir="${joride.web.dir}/templates/"/>
	</copy>


	<!-- completely synchronize web/sections directory with joride -->	
	<property name="sections.dir" value="${web.dir}/sections/" />
	<delete dir="${sections.dir}"/>
	<copy todir="${sections.dir}">
		<fileset dir="${joride.web.dir}/sections/"/>
	</copy>
	





  </target>
	
   

   <target name="prepare" 
         description="Create build and dist directory.">
      <delete dir="${build.dir}"/>
      <mkdir dir="${build.dir}"/>
      <mkdir dir="${build.dir}/WEB-INF"/>
      <mkdir dir="${build.dir}/WEB-INF/classes"/>
      <mkdir dir="${dist.dir}"/>
   </target>

   <target name="copy" depends="prepare"
         description="Copy files to build directory.">
      <copy todir="${build.dir}" failonerror="false" verbose="true">
         <fileset dir="${appdir}/web"/>
      </copy>
      <copy todir="${build.dir}/WEB-INF/classes" 
           failonerror="false" verbose="true">
         <fileset dir="${appdir}/src/java">
            <exclude name="**/*.java"/>
         </fileset>
      </copy>
      <copy todir="${build.dir}/WEB-INF" failonerror="false" verbose="true">
         <fileset dir="${appdir}">
            <include name="lib/**"/>
	 </fileset>
      </copy>
   </target>
   
   <target 
	name="compile" 
	depends="copy,synchronize" 
	description="Compile source files."
	>

      <javac 
         srcdir="${appdir}/src/java" 
         destdir="${build.dir}/WEB-INF/classes"
         debug="true"
	 includeantruntime="false"
         deprecation="true">
         <compilerarg value="-Xlint:unchecked"/>
         <include name="**/*.java"/>
         <classpath refid="classpath"/>
      </javac>
   </target>
   
   <target name="jsf-libs" if="use-jsf-libs" unless="glassfish">
      <mkdir dir="${build.dir}/WEB-INF/lib"/>
      <copy file="${jsf.api.jar}" todir="${build.dir}/WEB-INF/lib" verbose="true"/>
      <copy file="${jsf.impl.jar}" todir="${build.dir}/WEB-INF/lib" verbose="true"/>
   </target>

   <target name="el-libs" if="use-el-libs" unless="glassfish">
      <copy file="${el.api.jar}" todir="${build.dir}/WEB-INF/lib" 
            verbose="true" failonerror="false"/>
      <copy file="${el.impl.jar}" todir="${build.dir}/WEB-INF/lib" 
            verbose="true" failonerror="false"/>
   </target>

   <target name="bean-validation-libs" if="use-bean-validation-libs" unless="glassfish">
      <copy file="${bean-validation.impl.jar}" todir="${build.dir}/WEB-INF/lib" 
            verbose="true" failonerror="false"/>
      <copy todir="${build.dir}/WEB-INF/lib" verbose="true" failonerror="false">
        <fileset dir="${bean-validation.lib.dir}">
           <include name="*.jar"/>
        </fileset>
      </copy>
   </target>

   <target name="cdi-libs" if="use-cdi-libs" unless="glassfish">
      <copy file="${cdi.impl.jar}" todir="${build.dir}/WEB-INF/lib" 
            verbose="true" failonerror="false"/>
   </target>
   
   <target name="tomcat-libs" depends="jsf-libs, el-libs, bean-validation-libs, cdi-libs"/>

   <target name="war" depends="clean, compile, tomcat-libs"
         description="Build WAR file.">
      <delete file="${warfile}"/>
      <jar jarfile="${warfile}" basedir="${build.dir}"/>
   </target>

	
   <target name="build" depends="war" description="build the binaries"> 

  </target>

  <target name="dist" depends="build" description="create the distributables, but do not deploy"> 

  </target>




   <target name="install" depends="build"
         description="Deploy web application.">
      <copy file="${warfile}" todir="${deploy.dir}"/>
   </target>

   <target name="clean" 
         description="Clean everything.">
      <delete dir="${build.dir}"/>
      <delete dir="${dist.dir}"/>
   </target>
</project>
